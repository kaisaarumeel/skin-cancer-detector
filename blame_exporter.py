# This file is completely generated by AI,
# with the purpose of counting contributions in our repository
# Using Claude 3.5 Sonnet

import os
import subprocess
from collections import defaultdict

# Configuration
OUTPUT_FILE = "contrib_stats.md"
EXCLUDED_PATTERNS = [
    ".gitmodules",
    ".npmrc",
    "package-lock.json",
    ".dockerignore",
    ".gitignore",
    ".git/",
    "node_modules/",
    "vendor/",
    "dist/",
    "build/",
    ".jpg",
    ".jpeg",
    ".png",
    ".gif",
    ".ico",
    ".zip",
    ".tar",
    ".gz",
    ".rar",
    ".7z",
    ".pdf",
    ".pyc",
    ".so",
    ".dll",
    ".exe",
    ".bin",
    ".svg",
    ".ttf",
    ".woff",
    ".woff2",
    ".eot",
    ".mp3",
    ".mp4",
    ".avi",
    ".mov",
    ".wmv",
    ".flv",
    ".webm",
    ".sqlite3",
    ".pkl",
]

# Initialize data structures
file_stats = defaultdict(dict)
total_lines_per_email = defaultdict(int)


# Function to check if path should be excluded
def should_exclude(path):
    return any(pattern in path for pattern in EXCLUDED_PATTERNS)


def process_file(file):
    file_contributors = defaultdict(int)
    file_total = 0

    try:
        result = subprocess.run(
            ["git", "blame", "--line-porcelain", file],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
            encoding="utf-8",  # Specify the encoding
            errors="ignore",  # Ignore invalid characters
        )
    except subprocess.CalledProcessError as e:
        print(f"Error processing file: {file}. Error: {e}")
        return 0

    for line in result.stdout.splitlines():
        if line.startswith("author-mail "):
            email = line.split("<")[1].split(">")[0]
            file_contributors[email] += 1
            file_total += 1
            total_lines_per_email[email] += 1

    if file_total > 0:
        with open(OUTPUT_FILE, "a") as f:
            f.write(f"\n### {file}\n")
            f.write("| Email | Lines | Percentage |\n")
            f.write("|--------|-------|------------|\n")

            for email, lines in file_contributors.items():
                percentage = (lines / file_total) * 100
                f.write(f"| {email} | {lines} | {percentage:.2f}% |\n")

    return file_total


# Main execution
def main():
    # Write initial content to the output file
    with open(OUTPUT_FILE, "w") as f:
        f.write("# Repository Contribution Statistics\n")
        f.write(f"Generated on: {subprocess.getoutput('date')}\n")
        f.write("\n## File Statistics\n")

    total_repo_lines = 0

    # Process all files
    try:
        result = subprocess.run(
            ["git", "ls-files"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
            encoding="utf-8",
            errors="ignore",
        )
        for file in result.stdout.splitlines():
            if not should_exclude(file) and os.path.isfile(file):
                file_total = process_file(file)
                total_repo_lines += file_total
    except subprocess.CalledProcessError:
        print("Error processing Git files.")

    # Output overall statistics
    with open(OUTPUT_FILE, "a") as f:
        f.write("\n## Overall Repository Statistics\n")
        f.write(f"Total lines in repository: {total_repo_lines}\n")
        f.write("\n| Email | Total Lines | Repository Percentage |\n")
        f.write("|---------|--------------|---------------------|\n")

        for email, lines in total_lines_per_email.items():
            percentage = (lines / total_repo_lines) * 100
            f.write(f"| {email} | {lines} | {percentage:.2f}% |\n")

    print("Analysis complete! Results written to", OUTPUT_FILE)


if __name__ == "__main__":
    main()
