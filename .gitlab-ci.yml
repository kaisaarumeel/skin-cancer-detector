default:
  tags:
    - docker

stages:
  - backend-code-quality
  - backend-api-tests
  - backend-build
  - frontend-build
  - deploy

variables:
  DOCKER_IMAGE: python:3.12

cache:
  # Cache by branch name
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
  # Cache pip and docker downloads
    - .pip-cache/
    - .docker-cache/

.setup:
  image: $DOCKER_IMAGE
  before_script:
    # Install system dependencies for OpenCV
    - apt-get update
    - apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev
    # Install Python dependencies and cache them
    - python -m pip install -r requirements.txt

backend-code-quality:
  extends: .setup
  stage: backend-code-quality
  script:
    # Ensure code is formatted correctly
    - python -m black . --check || (echo "❌ Code formatting check failed. Run 'black .' locally to fix formatting" && exit 1)
    
    # Ensure django system checks pass
    - cd server
    - python manage.py check || (echo "❌ Django system checks failed" && exit 1)
  rules: 
    # Only run on main and develop branches
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main|develop)/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /(main|develop)/

backend-api-tests:
  extends: .setup
  stage: backend-api-tests
  script:
    # Run backend tests
    - cd server
    - python manage.py test --verbosity=2
  rules:
    # Only run on main and develop branches
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main|develop)/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /(main|develop)/

backend-build:
  stage: backend-build
  image: docker:24.0.2
  tags: 
    - docker-build
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest || true
    - docker build --cache-from=$CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest -t $CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest .
    - docker push $CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest
  rules: 
    # Only run on push to main or with explicit tag
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main)/
    - if: $CI_COMMIT_TAG =~ /build/

frontend-build:
  stage: frontend-build
  image: docker:24.0.2
  tags: 
    - docker-build
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest || true
    - docker build --cache-from=$CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest -f client/Dockerfile -t $CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest client
    - docker push $CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest
  rules: 
    # Only run on push to main or with explicit tag
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main)/
    - if: $CI_COMMIT_TAG =~ /build/

deploy-app:
  stage: deploy
  image: docker:24.0.2
  variables:
  before-script:
    - apk add --no-cache openssh  # Install SSH client in the docker image
    - echo "$SSH_PRIVATE_KEY" | base64 -d > /root/.ssh/id_rsa # Decode and save the SSH private key
    - chmod 600 /root/.ssh/id_rs
    - ssh-keyscan -H your-server-ip >> /root/.ssh/known_hosts
  script:
    - cd deployment
    - scp docker-compose.yml skinscan.service your-user@your-server-ip:/path/to/your/project
    - ssh your-user@your-server-ip <<EOF
        export CI_REGISTRY_USER=$CI_REGISTRY_USER
        export CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD
        export CI_REGISTRY=$CI_REGISTRY
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        sudo mv /path/to/your/service/file /etc/systemd/system/skinscan.service
        sudo systemctl daemon-reload
        sudo systemctl start skinscan.service
        sudo systemctl status skinscan.service
      EOF
  rules: 
    # Only run on push to main or with explicit tag
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main)/
    - if: $CI_COMMIT_TAG =~ /deploy/