default:
  tags:
    - docker

stages:
  - backend-code-quality
  - backend-api-tests
  - backend-build
  - frontend-build
  - deploy

variables:
  DOCKER_IMAGE: python:3.12

cache:
  # Cache by branch name
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
  # Cache pip downloads
    - .pip-cache/

.setup:
  image: $DOCKER_IMAGE
  before_script:
    # Install system dependencies for OpenCV
    - apt-get update
    - apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev
    # Install Python dependencies
    - python -m pip install -r requirements.txt

backend-code-quality:
  extends: .setup
  stage: backend-code-quality
  script:
    # Ensure code is formatted correctly
    - python -m black . --check || (echo "❌ Code formatting check failed. Run 'black .' locally to fix formatting" && exit 1)
    
    # Ensure django system checks pass
    - cd server
    - python manage.py check || (echo "❌ Django system checks failed" && exit 1)
  rules: 
    # Only run on main and develop branches
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main|develop)/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /(main|develop)/

backend-api-tests:
  extends: .setup
  stage: backend-api-tests
  script:
    # Run backend tests
    - cd server
    - python manage.py makemigrations
    - python manage.py test --verbosity=2
  rules:
    # Only run on main and develop branches
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main|develop)/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /(main|develop)/

backend-build:
  stage: backend-build
  image: docker:24.0.2
  tags: 
    - docker-build
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest || true
    - docker build --build-arg SECRET_KEY=$(echo $BACKEND_SECRET_KEY | base64 -d) -t $CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest .
    - docker push $CI_REGISTRY/courses/dit826/2024/group6/skinscan-backend:latest
  rules: 
    # Only run on push to main or with explicit tag
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main)/
    - if: $CI_COMMIT_TAG =~ /build/ && $CI_COMMIT_TAG =~ /backend/

frontend-build:
  stage: frontend-build
  image: docker:24.0.2
  tags: 
    - docker-build
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest || true
    - docker build -f client/Dockerfile --no-cache --build-arg VITE_BACKEND_SKINSCAN=http://$SERVER_IP:8000 -t $CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest client
    - docker push $CI_REGISTRY/courses/dit826/2024/group6/skinscan-frontend:latest
  rules: 
    # Only run on push to main or with explicit tag
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main)/
    - if: $CI_COMMIT_TAG =~ /build/ && $CI_COMMIT_TAG =~ /frontend/

deploy-app:
  stage: deploy
  image: docker:24.0.2
  variables:
    SETUP_PROMPT_1: "n"
    SETUP_PROMPT_2: ""
  before_script:
    - mkdir ~/.ssh/
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/skinscan # decode and save the SSH private key
    - chmod 600 ~/.ssh/skinscan # set up ssh directory permissions
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts # add server key to known hosts
    - eval $(ssh-agent -s) # start SSH agent in shell session
    - ssh-add ~/.ssh/skinscan
  script:
    - cd deployment
    # move service files to server
    - scp -i ~/.ssh/skinscan docker-compose.yml skinscan.service create_env.sh $SERVER_USER@$SERVER_IP:/services/skinscan/
    - | # connect to server via ssh and execute commands
      ssh $SERVER_USER@$SERVER_IP <<EOF
        # authenticate sudo for this session
        echo "$SERVER_USER_PWD" | sudo -S true
        # Create environment file dynamically
        sudo chmod +x create_env.sh
        sudo /services/skinscan/create_env.sh "http://$SERVER_IP:8000" "$BACKEND_SECRET_KEY" "$SETUP_PROMPT_1" "$SETUP_PROMPT_2"
        # login to repo container registry and start service
        sudo docker login -u rokanas -p $CI_REGISTRY_TOKEN $CI_REGISTRY
        sudo mv /services/skinscan/skinscan.service /etc/systemd/system/skinscan.service
        sudo systemctl daemon-reload
        sudo systemctl restart skinscan.service
      EOF
  rules: 
    # Only run on push to main or with explicit tag
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /(main)/
    - if: $CI_COMMIT_TAG =~ /deploy/
    - if: $CI_COMMIT_TAG =~ /setup-n/
      variables:
        SETUP_PROMPT_1: "n"
        SETUP_PROMPT_2: "y"
    - if: $CI_COMMIT_TAG =~ /setup-yn/
      variables:
        SETUP_PROMPT_1: "y"
        SETUP_PROMPT_2: "n"
    - if: $CI_COMMIT_TAG =~ /setup-yy/
      variables:
        SETUP_PROMPT_1: "y"
        SETUP_PROMPT_2: "y"
